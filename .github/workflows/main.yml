name: CI
# Controls when action will run

on: 
# Triggers the workflow

  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]
#allows you to run this workflow manually from actions tab
  workflow_dispatch:
  #workflow is made up of one or more jobs that can run sequentially or in parallel.

jobs:
# This workflow contains a single job called "build"
  lint:
  #The type of runner that the job will run 
    runs-on: ubuntu-latest

    #steps represent a sequence of tasks that will be executed as part of the job
    steps: 
    #checks out your repository under $GITHUB-WORKSPACE, so your job can access it.
      - name: Checkout the code
        uses: actions/checkout@v2

        #update java version
      - name: Set Up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Run lint
        run: echo Run Lint
      
#      #Runs a single command using the runner shell
#      #- name: Run a one-line script
#      #  run: echo Hello, world!
#      - name: Run Lint
#        run: ./gradlew lintDebug
#       #runs a set of commands using the runner shell
#      - name: Upload html test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: lint.html
#          path: app/build/reports/lint-results-debug.html
#
#          #run: |
#         #  echo Add other actions to build,
#          # echo test, and deploy your project.

  #unit tests
  unit-test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      #update java version
      - name: Set Up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Run unit-test
        run: echo Run unit-test

#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: unit_test_report
#          path: app/build/reports/tests/testDebugUnitTest/

  #instrumentation test
  instrumentation-test:
    needs: [unit-test]
    # we run on mac since it require an emulator and emulators on mac are quick

    runs-on: macos-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      # update java version
      - name: Set Up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Run instrumentation-test
        run: echo instrumentation-test

#      - name: Run espresso tests
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: 29
#          script: ./gradlew connectedCheck
#
#      - name: Upload test report
#        uses: actions/upload-artifact@v2
#        with:
#          name: instrumentation_test_report
#          path: app/build/reports/androidTests/connected/

  #static code analysis
  static-code-analysis:
    needs: [instrumentation-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set Up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: SonarCloud Scan
        run: ./gradlew sonarqube -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}